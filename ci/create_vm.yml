---
- name: "Verify Ansible Version to be greater than or equal to 2.0"
  hosts: localhost
  gather_facts: false
  tasks:
    - fail:
        msg: "Unsupported ansible version: {{ ansible_version }} found"
      when: ansible_version.full | version_compare('2.0', 'lt')

- name: "Create require VMs on Openstack"
  hosts: localhost
  connection: local
  gather_facts: true
  tasks:
    - name: Create network
      os_network:
        name: ci-net

    - name: Create subnet
      os_subnet:
        name: ci-subnet
        network_name: ci-net
        cidr: 192.168.1.0/24
        gateway_ip: 192.168.1.1
        dns_nameservers:
          - 8.8.8.8
          - 8.8.4.4

    - name: Create router
      os_router:
        name: ci-router
        interfaces:
          - ci-subnet
        network: external_network

    - name: Create instances
      os_server:
        name: "{{ item }}"
        flavor: "{{ ci_flavor }}"
        auto_ip: no
        network: ci-net
        image: "{{ ci_image }}"
        key_name: id_rsa
      with_items: "{{groups['all']}}"
      when: not item == 'localhost'

    - name: assign a floating IP to the monitoring
      os_floating_ip:
        reuse: yes
        server: "{{ groups['monitoring'][0] }}"

    - name: wait a bit for the floating ip to be assigned
      pause:
        seconds: 10

    - name: Gather facts of newly created servers
      os_server_facts:
      tags: ssh

    - name: generate .ssh/config
      template:
        src: ssh_config.j2
        dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
        mode: 0600
      vars:
        user: "{{ ci_user }}"
      tags: ssh

    - name: wait for ssh to be ready on servers
      command: "ssh -o ConnectTimeout=5 {{ item }} echo '1'"
      register: log_output
      until: log_output.stdout.find("1") > -1
      retries: 50
      delay: 5
      with_items: "{{groups['all']}}"
      when: not item == 'localhost'
      tags: test

- name: prepare servers
  hosts: all
  tasks:
    - name: don't use dns in sshd
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^#?UseDNS'
        line: 'UseDNS no'
      tags: ssh

    - name: restart sshd
      service:
        name: sshd
        state: restarted
      tags: ssh

    - name: fix hostname
      hostname:
        name: "{{ ansible_hostname }}"

    - name: disable requiretty in sudoers
      lineinfile:
        dest: /etc/sudoers
        regexp: 'Defaults +requiretty'
        line: '#Defaults requiretty'
