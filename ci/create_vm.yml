---
- name: "Verify Ansible Version to be greater than or equal to 2.0"
  hosts: localhost
  gather_facts: false
  tasks:
    - fail:
        msg: "Unsupported ansible version: {{ ansible_version }} found"
      when: ansible_version.full | version_compare('2.0', 'lt')

- name: "Create require VMs on Openstack"
  hosts: localhost
  connection: local
  gather_facts: true
  tasks:
    - name: Create libvirt network
      virt_net:
        command: define
        name: br_nat
        xml: '{{ lookup("template", "libvirt-network.xml.j2") }}'
      become: yes

    - name: Start libvirt network
      virt_net:
        command: create
        name: br_nat
      become: yes

    - name: Define libvirt pool
      virt_pool:
        command: define
        name: vms
        xml: '{{ lookup("template", "libvirt-pool.xml.j2") }}'
      become: yes

    - name: Build libvirt pool
      virt_pool:
        command: build
        name: vms
      become: yes

    - name: Create libvirt pool
      virt_pool:
        command: create
        name: vms
      become: yes

    - name: create qcow2 images for instances
      command: "qemu-img create -f qcow2 -o backing_file={{ ci_image_path }} /var/lib/libvirt/images/{{ item }}.qcow2"
      with_items: "{{groups['all']}}"
      when: not item == 'localhost'
      become: yes

    - name: Define instances
      virt:
        name: "{{ item }}"
        command: define
        xml: '{{ lookup("template", "libvirt-instance.xml.j2") }}'
      with_items: "{{groups['all']}}"
      when: not item == 'localhost'
      become: yes

    - name: start vm
      virt:
        name: '{{ item }}'
        state: running
      with_items: "{{groups['all']}}"
      when: not item == 'localhost'
      become: yes

    - name: wait for dhcp leases to be present
      command: "./ci/wait_for_dhcp_leases.sh {{ item }}"
      register: lease
      with_items: "{{groups['all']}}"
      when: not item == 'localhost'

    - name: create .ssh/config
      copy:
        dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
        content: "StrictHostKeyChecking no"

    - name: complete .ssh/config
      shell: "./ci/generate_ssh_config.sh {{ item }} {{ ci_user }} >> {{ lookup('env', 'HOME') }}/.ssh/config"
      with_items: "{{groups['all']}}"
      when: not item == 'localhost'
      tags: ssh

    - name: set permission on .ssh/config
      file:
        path: "{{ lookup('env', 'HOME') }}/.ssh/config"
        mode: 0600

    - name: wait for ssh to be ready on servers
      command: "ssh -o ConnectTimeout=5 {{ item }} echo '1'"
      register: log_output
      until: log_output.stdout.find("1") > -1
      retries: 50
      delay: 5
      with_items: "{{groups['all']}}"
      when: not item == 'localhost'

- name: prepare servers
  hosts: all
  tasks:
    - name: don't use dns in sshd
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^#?UseDNS'
        line: 'UseDNS no'
      tags: ssh

    - name: restart sshd
      service:
        name: sshd
        state: restarted
      tags: ssh

    - name: fix hostname
      hostname:
        name: "{{ inventory_hostname }}"

    - name: disable requiretty in sudoers
      lineinfile:
        dest: /etc/sudoers
        regexp: 'Defaults +requiretty'
        line: '#Defaults requiretty'
