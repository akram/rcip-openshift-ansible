#can use your /etc/ansible/hosts


[OSEv3:children]
masters
nodes
etcd
nfs
dns
monitoring

[masters]
master1  openshift_hostname=master1
master2  openshift_hostname=master2

[etcd]
master1  openshift_hostname=master1
master2  openshift_hostname=master2
node1    openshift_hostname=node1

[nodes]
master1  openshift_hostname=master1
master2  openshift_hostname=master2
node1    openshift_hostname=node1

[monitoring]
node1

[dns]
#setup dnsmasq
node1

[nfs]
#setup nfs server
master1

[OSEv3:vars]
ansible_sudo=true
debug_level=2
deployment_type=origin
ansible_become=true
ansible_ssh_user=centos

openshift_use_dnsmasq=False

[all:vars]
#CI
ci_image=centos7
ci_user=centos
ci_flavor=m1.small

openshift_master_cluster_hostname="master1"
openshift_master_cluster_method=native

#Vip ip used into dnsmasq to match to the openshift api fqdn (only needed if you use dns role)
#customer_api_public_vip="1.2.3.4"
monitoring_vip="node1"

rabbitmq_sensu_password="password"
customer="openshift_test"
customer_domain="lan"
# if you want to be able to reach sensu with other domain names than the default mon.{{ customer_domain }} :
customer_sensu_httpd_aliases=['monitor.lan']
customer_logs_httpd_aliases=['log.lan']
customer_graphs_httpd_aliases=['metrics.lan']

# default handler is mailer
# sensu_handlers=["mailer", "flowdock"]
# sensu_flowdock_auth_token="mytoken"
sensu_mail_to="mail1@domain.com, mail2@domain"
#wildcard to generate router certificat
openshift_wildcard_dns="*.{{ customer_domain }}"

#
#Optional
#

customer_docker_storage_dev=xvdf
customer_collectd_disk_rootfs=xvda2

# In case you want to use local storage for registry
# customer_openshift_registry_mount_host='/mnt/ose-registry'
# customer_collectd_disk_ose_registry=xvdg

#customer_http_proxy=http://openshiftproxy.com:8080
#customer_https_proxy=http://openshiftproxy.com:8080
#customer_append_no_proxy=",.intranet.customer"
# or if you want to overwrite default no_proxy instead:
# customer_no_proxy="localhost,.svc.cluster.local,.intranet.customer"
customer_update_no_proxy=false

# manage docker storage true/false
manage_docker_storage=false

# for monitoring check using api rest
#openshift_base_api='/api/v1/'

# Subscriptions. If you want to automatically register all your nodes.
# subscription_name='username'
# subscription_pass='password'
# subscription_pool='^Openshift Standard.*$'

customer_sensu_httpd_port='80'
customer_sensu_httpd_ssl='false'
customer_grafana_httpd_port='80'
customer_grafana_httpd_ssl='false'
customer_kibana_httpd_port='80'
customer_kibana_httpd_ssl='false'
# if you don't want to use the default volume group docker-vg for docker:
# customer_docker_vg=rhel

# you can also override defaults:
# graphite_mysql_user='graphite'
# graphite_mysql_password='graphite'
# graphite_mysql_db='graphite'
# if you have an external mysql already setup, and you want to use it,
# you can change mysql_host:
# mysql_host='127.0.0.1'
# mysql_port='3306'
# if it's different of '127.0.0.1' or 'localhost',
# playbook will then not install mysql and create user/db on monitoring host.

# logstash
# If you want to log /var/log/containers/* (default false)
# logstash_containers=true
ntp_servers=["ntp1.customer", "ntp2.customer"]
dns_servers=["8.8.8.8", "8.8.4.4"]
postfix_relayhost="smtp.mycustomer.intranet"
postfix_myorigin="smtp.mycustomer.com"
timezone="Europe/Paris"
### Cloud ###

## Should cloud settings be managed. Default: false
customer_cloud_init_manage=true

## Should hostname should be preserve. Default: true
customer_cloud_init_preserve_hostname=true
